FASE 0: Configuraci√≥n Inicial Simplificada
Objetivo: Establecer las bases del proyecto, entorno de trabajo y arquitectura inicial de forma eficiente.
________________________________________
‚Ä¢ Tarea 0.1: Definir Requisitos Detallados y Refinamiento del Alcance
‚Ä¢	Revisar el modelo C4 y elaborar cada funcionalidad e historia de usuario.
‚Ä¢	Clarificar ambig√ºedades y finalizar el alcance de la primera versi√≥n.
‚Ä¢	Definir criterios de aceptaci√≥n para funcionalidades clave.
________________________________________
‚Ä¢ Tarea 0.2: Configurar Gesti√≥n de Proyecto y Control de Versiones
‚Ä¢	Elegir herramienta de gesti√≥n de proyectos (ej. Trello, Jira).
‚Ä¢	Inicializar repositorio Git (ej. GitHub).
‚Ä¢	Definir estrategia de ramificaci√≥n (ej. Gitflow).
________________________________________
‚Ä¢ Tarea 0.3: Configurar Entorno de Desarrollo
o Tarea 0.3.1: Instalar Python y Crear Entorno Virtual
‚Ä¢	Asegurar que Python (√∫ltima versi√≥n estable compatible con Django) est√© instalado.
‚Ä¢	Crear un directorio para el proyecto.
‚Ä¢	Crear entorno virtual: python -m venv venv.
‚Ä¢	Activar entorno virtual.
‚Ä¢	Crear archivo requirements.txt con paquetes iniciales (Django).
o Tarea 0.3.2: Instalar PostgreSQL y Configurar
‚Ä¢	Instalar servidor PostgreSQL.
‚Ä¢	Crear una base de datos para el proyecto.
‚Ä¢	Crear usuario de base de datos con permisos adecuados.
o Tarea 0.3.3: Instalar Node.js y Vue CLI
‚Ä¢	Instalar Node.js.
‚Ä¢	Instalar Vue CLI globalmente (npm install -g @vue/cli).

‚Ä¢ Tarea 0.4: Configuraci√≥n Inicial del Proyecto Backend con Django
o Tarea 0.4.1: Crear Proyecto Django y Aplicaci√≥n Principal (Core)
‚Ä¢	Instalar Django y dependencias:
pip install django djangorestframework psycopg2-binary daphne channels
‚Ä¢	Crear nuevo proyecto Django.
‚Ä¢	Crear aplicaciones iniciales (ej. usuarios, turnos).
o Tarea 0.4.2: Configurar Conexi√≥n a Base de Datos (PostgreSQL)
‚Ä¢	Editar settings.py con credenciales de la base de datos PostgreSQL.
o Tarea 0.4.3: Configurar Django Channels para WebSockets
‚Ä¢	Configurar settings.py y asgi.py para Channels.
‚Ä¢	Definir rutas b√°sicas para WebSockets.
‚Ä¢ Tarea 0.5: Dise√±ar Esquema de Base de Datos
‚Ä¢	Definir modelos Django seg√∫n el modelo C4.
‚Ä¢	Planificar relaciones entre modelos.
‚Ä¢	Ejecutar migraciones iniciales (python manage.py makemigrations && migrate).
‚Ä¢ Tarea 0.6: Configurar Estructura de la Aplicaci√≥n Web (Frontend Unificado)
‚Ä¢	Crear un √∫nico proyecto Vue.js responsivo usando Vue CLI.
‚Ä¢	Implementar rutas protegidas seg√∫n roles de usuario: Usuario, Empleado, Administrador.
‚Ä¢	A√±adir Tailwind CSS durante la configuraci√≥n.
‚Ä¢	Estructurar carpetas de vistas y componentes seg√∫n los roles.
________________________________________

FASE 1: Desarrollo del Backend (Django + DRF) SIMPLIFICADO 

1.1 Autenticaci√≥n y Autorizaci√≥n de Usuarios
‚Ä¢	Modelos con roles: Usuario, Empleado, Administrador.
‚Ä¢	Registro e inicio de sesi√≥n.
‚Ä¢	Permisos por rol.
1.2 Modelos Principales
‚Ä¢	Turno, Servicio/M√≥dulo, Sucursal, CalificacionServicio, Configuracion.
‚Ä¢	Migraciones aplicadas.
1.3 APIs para Aplicaci√≥n Web Unificada
1.3.1 Registro e Inicio de Sesi√≥n
‚Ä¢	/api/auth/registro/
‚Ä¢	/api/auth/iniciar-sesion/
1.3.2 Selecci√≥n de Servicio
‚Ä¢	/api/servicios/ (listar)
‚Ä¢	/api/turnos/ (crear turno)
1.3.3 Estado del Turno
‚Ä¢	/api/turnos/mio/ (estado actual)
‚Ä¢	/api/turnos/mio/ (DELETE para cancelar)
1.3.4 Calificaci√≥n de Servicio
‚Ä¢	/api/calificaciones/
1.3.5 Agenda de Turnos
‚Ä¢	/api/turnos/agenda/
1.3.6 Historial de Turnos
‚Ä¢	/api/turnos/historial/
________________________________________
1.5 APIs para Atenci√≥n del Empleado
1.5.1 Inicio de Sesi√≥n
‚Ä¢	/api/auth/empleado/iniciar-sesion/
1.5.2 Gesti√≥n de Turnos
‚Ä¢	/api/empleado/turnos/siguiente/
‚Ä¢	/api/empleado/turnos/{id_turno}/completar/
‚Ä¢	/api/empleado/turnos/{id_turno}/transferir/
1.5.3 Panel de Atenci√≥n
‚Ä¢	/api/empleado/turnos/actual/
1.5.4 Cola de Turnos
‚Ä¢	/api/empleado/colas/
1.5.5 Estad√≠sticas del Empleado
‚Ä¢	/api/empleado/estadisticas/
________________________________________
1.6 APIs para el Administrador
1.6.1 Inicio de Sesi√≥n Admin
‚Ä¢	/api/auth/admin/iniciar-sesion/
1.6.2 Dashboard
‚Ä¢	/api/admin/panel/
1.6.3 Gesti√≥n de M√≥dulos/Servicios
‚Ä¢	/api/admin/servicios/
1.6.4 Estad√≠sticas Avanzadas
‚Ä¢	/api/admin/reportes/
1.6.5 Gesti√≥n de Usuarios
‚Ä¢	/api/admin/usuarios/
1.6.6 Gesti√≥n de Sucursales
‚Ä¢	/api/admin/sucursales/
1.6.7 Configuraci√≥n General
‚Ä¢	/api/admin/configuracion/

________________________________________
1.7 L√≥gica de Negocio Principal 
Implementaci√≥n de las reglas clave del sistema, enfocadas en la gesti√≥n eficiente de los turnos.
Algoritmos de Turnos y Colas
‚Ä¢	Asignaci√≥n autom√°tica del turno:
Basado en disponibilidad del servicio, sucursal y orden de llegada.
‚Ä¢	Priorizaci√≥n:
Posible implementaci√≥n futura de prioridades por tipo de usuario.
‚Ä¢	Evitar duplicados:
Reglas para impedir m√∫ltiples turnos activos por usuario.
C√°lculo de Tiempo de Espera
‚Ä¢	Basado en:
o	Cantidad de turnos en cola por servicio.
o	Tiempo promedio de atenci√≥n de ese servicio.
‚Ä¢	Retorno estimado de espera en minutos para mostrar al usuario.
Notificaciones Simuladas con Polling
‚Ä¢	La app cliente consulta peri√≥dicamente a /api/turns/me/ para:
o	Saber si su turno fue llamado.
o	Ver cambios de estado: esperando, en atenci√≥n, completado.
Reasignaci√≥n o Transferencia de Turnos (Empleado)
‚Ä¢	Permitir a los empleados transferir turnos entre servicios/m√≥dulos.
‚Ä¢	Actualiza la cola destino manteniendo el orden cronol√≥gico.
________________________________________
1.8 Panel de Administraci√≥n Django 
Utilizado principalmente por el equipo t√©cnico para gesti√≥n r√°pida de datos en desarrollo y pruebas.
Modelos Registrados en el admin.py
‚Ä¢	Usuario (con roles).
‚Ä¢	Sucursal y Servicio.
‚Ä¢	Turno y AgendaTurno.
‚Ä¢	CalificacionServicio.
‚Ä¢	Configuracion del sistema.
‚Ä¢	Logs de actividad (si se implementan).
Personalizaciones √ötiles
‚Ä¢	Filtros por fecha, sucursal o estado del turno.
‚Ä¢	Visualizaci√≥n r√°pida de:
o	Usuarios con m√°s turnos.
o	Turnos activos y en cola.
‚Ä¢	Edici√≥n inline de configuraciones (ej. tiempo m√°ximo de espera).
________________________________________
1.9 Pruebas Backend 
Garantiza que las funciones del backend operen correctamente antes del despliegue.
Pruebas Unitarias
‚Ä¢	Modelo Turno:
o	Creaci√≥n y cambio de estado.
o	Validaci√≥n de reglas de negocio (no duplicar turnos, etc.).
‚Ä¢	Modelo Servicio:
o	Relaci√≥n con sucursales y empleados.
‚Ä¢	C√°lculo de espera: funciones auxiliares para estimar tiempo correctamente.
Pruebas de Integraci√≥n
‚Ä¢	Registro e inicio de sesi√≥n:
o	Pruebas con tokens y autenticaci√≥n.
‚Ä¢	Flujo completo de turnos:
o	Crear turno ‚Üí avanzar en cola ‚Üí completar.
‚Ä¢	Gesti√≥n de empleados:
o	Siguiente turno ‚Üí completar ‚Üí ver estad√≠sticas.
üîß Herramientas y Frameworks
‚Ä¢	Django TestCase para pruebas r√°pidas.
‚Ä¢	pytest + pytest-django si se busca un entorno m√°s potente.
‚Ä¢	Posible uso de FactoryBoy para generar datos de prueba.
________________________________________
FASE 2: Desarrollo Frontend - Aplicaci√≥n Web Unificada (Vue.js, Tailwind CSS) 

Tarea 2.1: Configuraci√≥n del Proyecto
‚Ä¢	Inicializar con Vue CLI: vue create sistema-digiturno
‚Ä¢	Integrar Tailwind CSS para estilos.
‚Ä¢	Configurar Vue Router (estructura con rutas protegidas).
‚Ä¢	Implementar gesti√≥n de estado con Pinia o Vuex.
‚Ä¢	Crear estructura base de carpetas por roles:
o	/views/user/
o	/views/employee/
o	/views/admin/
o	/components/common/

Tarea 2.2: Dise√±o UI/UX
‚Ä¢	Convertir componentes del modelo C4 en interfaces responsivas.
‚Ä¢	Dise√±ar y desarrollar componentes reutilizables con Tailwind CSS.
‚Ä¢	Prototipos simples en Figma o similares (opcional pero recomendado).

Tarea 2.3: M√≥dulo de Registro e Inicio de Sesi√≥n (AuthView)
‚Ä¢	Formularios para registro e inicio de sesi√≥n por rol.
‚Ä¢	Validaci√≥n de campos, mensajes de error claros.
‚Ä¢	Integraci√≥n con APIs de autenticaci√≥n.
‚Ä¢	Guardar token y redireccionar seg√∫n rol.

Tarea 2.4: Selecci√≥n de Servicio (ServiceSelectionView)
‚Ä¢	Mostrar lista de servicios desde API.
‚Ä¢	Permitir al usuario seleccionar servicio y crear turno.

Tarea 2.5: Estado del Turno (TurnStatusView)
‚Ä¢	Mostrar:
o	N√∫mero de turno.
o	Progreso y tiempo estimado.
‚Ä¢	Se usa polling cada X segundos para actualizaciones.
‚Ä¢	Bot√≥n para cancelar turno.

Tarea 2.6: Notificaci√≥n de Turno (TurnNotification)
‚Ä¢	Mostrar alerta visual/audible cuando el turno es llamado.
‚Ä¢	Indicar ventanilla/m√≥dulo.
‚Ä¢	Tambi√©n implementado mediante polling, no WebSocket.

Tarea 2.7: Calificaci√≥n del Servicio (ServiceRatingView)
‚Ä¢	Formulario de calificaci√≥n con estrellas/comentarios.
‚Ä¢	Enviar datos a API.

Tarea 2.8: Agenda de Turnos (TurnSchedulingView)
‚Ä¢	Permitir agendar turno seleccionando fecha, hora y servicio.
‚Ä¢	Enviar datos a backend.

Tarea 2.9: Historial de Turnos (TurnHistoryView)
‚Ä¢	Mostrar historial completo de turnos.
‚Ä¢	Agrupar por fecha y estado (atendido, cancelado, agendado).

Tarea 2.10: Dise√±o Responsivo
‚Ä¢	Usar utilidades de Tailwind para adaptaci√≥n m√≥vil/tablet.
‚Ä¢	Pruebas en diferentes breakpoints.

Tarea 2.11: Pruebas Frontend
‚Ä¢	Usar Vue Test Utils + Jest o Vitest.
‚Ä¢	Probar componentes, validaciones, l√≥gica condicional (rutas por rol, carga de datos, etc.).

________________________________________
FASE 3: Pruebas (Enfocadas y Progresivas) 
Objetivo
Asegurar la calidad del sistema mediante pruebas unitarias y de integraci√≥n ligera, sin pruebas End-to-End ni de rendimiento a gran escala.
________________________________________
Tarea 3.1: Integraci√≥n Ligera del Sistema
‚Ä¢	Verificar que el backend y frontend unificado se comuniquen correctamente.
‚Ä¢	Probar manualmente los flujos m√°s importantes (solicitud y atenci√≥n de turno).
‚Ä¢	Asegurar que las rutas protegidas por rol se comporten como se espera.
________________________________________
Tarea 3.2: Pruebas Unitarias de Backend
‚Ä¢	Probar:
o	Modelos: validaciones, relaciones, m√©todos.
o	Serializadores: campos obligatorios, transformaciones, reglas.
o	Vistas/API: comportamiento esperado ante inputs v√°lidos/err√≥neos.
‚Ä¢	Herramientas recomendadas: pytest, pytest-django, factory_boy.
________________________________________
Tarea 3.3: Pruebas de Componentes Frontend (Vue)
‚Ä¢	Probar renderizado y comportamiento de componentes con datos simulados.
‚Ä¢	Validar:
o	Interacci√≥n del usuario con formularios (login, registro, creaci√≥n de turno...).
o	Visualizaci√≥n de estado del turno.
o	Acciones de botones y navegaci√≥n.
‚Ä¢	Herramientas sugeridas: Vitest o Jest, Vue Test Utils.
________________________________________
Tarea 3.4: Pruebas de Seguridad B√°sica
‚Ä¢	Validar manualmente:
o	Restricciones de acceso por rol.
o	Autenticaci√≥n protegida (tokens, sesiones).
o	No exposici√≥n de datos sensibles en respuestas o errores.
________________________________________
Tarea 3.5: Revisi√≥n Manual y Validaci√≥n Funcional
‚Ä¢	Realizar pruebas b√°sicas con usuarios simulados (usuario, empleado, admin).
‚Ä¢	Validar que el flujo de uso completo sea funcional en condiciones comunes:
o	Registro ‚Üí Solicitud de turno ‚Üí Atenci√≥n ‚Üí Calificaci√≥n.
________________________________________
Tarea 3.6: Correcci√≥n de Errores y Ajustes UI/UX
‚Ä¢	Documentar bugs encontrados durante las pruebas.
‚Ä¢	Refinar la interfaz, mensajes de error, retroalimentaci√≥n visual.

________________________________________
FASE 4: Despliegue Inicial Simplificado 
Objetivo: Poner en l√≠nea el sistema utilizando una soluci√≥n PaaS que reduzca la complejidad t√©cnica del despliegue y permita iterar r√°pidamente.
________________________________________
üîß Tarea 4.1: Selecci√≥n y Preparaci√≥n de Plataforma
‚Ä¢	Elegir una PaaS:
o	Backend: Render, Railway, Heroku
o	Frontend: Vercel, Netlify
‚Ä¢	Configurar repositorios:
o	Separar backend y frontend si no lo est√°n.
o	Verificar archivos de configuraci√≥n (requirements.txt, Procfile, vercel.json, etc.).
________________________________________
Tarea 4.2: Configuraci√≥n del Backend (Django)
‚Ä¢	Desplegar en Render / Railway / Heroku:
o	Conectar el repositorio desde GitHub.
o	Configurar variables de entorno desde el panel.
o	Asegurarse de usar base de datos PostgreSQL (proporcionada por la PaaS).
o	Verificar comandos de migraci√≥n:
________________________________________
Tarea 4.3: Configuraci√≥n del Frontend
‚Ä¢	Desplegar app m√≥vil web y paneles en Vercel o Netlify:
o	Ejecutar npm run build o yarn build.
o	Conectar repositorio Git.
o	Configurar variables de entorno (ej. VITE_API_URL o similares).
o	Verificar rutas y assets correctamente construidos.
o	Para m√∫ltiples apps:
ÔÇß	Panel Admin: admin.miapp.com
ÔÇß	Staff: staff.miapp.com
ÔÇß	Usuario: dominio principal o subruta
________________________________________
Tarea 4.4: Seguridad y Configuraciones
‚Ä¢	Variables sensibles:
o	Backend: SECRET_KEY, DATABASE_URL, DEBUG=False
o	Frontend: Solo exponer lo necesario (VITE_ o NEXT_PUBLIC_)
‚Ä¢	Autenticaci√≥n y roles:
o	Validar restricciones de acceso a APIs y rutas.
________________________________________
Tarea 4.5: Pruebas en Producci√≥n (Smoke Testing)
‚Ä¢	Verificar:
o	Acceso HTTPS funcional.
o	Conexi√≥n entre frontend y backend.
o	Login y funcionalidades principales.
o	Comunicaci√≥n WebSocket (si aplica).
o	Redirecciones correctas, errores bien manejados.
________________________________________
Tarea 4.6: Lanzamiento Inicial y Feedback
‚Ä¢	Lanzamiento beta:
o	Compartir URLs con grupo reducido de usuarios.
o	Recolectar retroalimentaci√≥n inicial.
o	Corregir errores menores r√°pidamente gracias al despliegue continuo.
________________________________________
Tarea 4.7: Documentaci√≥n B√°sica y Soporte
‚Ä¢	Manual r√°pido de uso por rol (usuario, staff, admin).
‚Ä¢	Documentaci√≥n t√©cnica m√≠nima:
o	Enlace al repositorio
o	Variables y comandos de despliegue
o	Rutas principales y estructura del proyecto

________________________________________
FASE 5: QA y Mejoras Futuras 
Objetivo: Garantizar la calidad continua del sistema en producci√≥n, planificar mejoras y preparar la evoluci√≥n hacia una infraestructura m√°s robusta cuando sea necesario.
Tarea 5.1: Monitoreo y Calidad
‚Ä¢	Implementar herramientas de monitoreo (seg√∫n plataforma):
o	Errores: Sentry (frontend y backend).
o	Logs: Integraciones b√°sicas como Railway Logs o Render Logs.
o	Rendimiento: Herramientas ligeras como Upptime o servicios APM si es necesario.
‚Ä¢	Verificar comportamiento en producci√≥n:
o	Tiempos de respuesta.
o	Flujo de usuarios.
o	Ca√≠das o excepciones recurrentes.
Tarea 5.2: Feedback de Usuarios
‚Ä¢	Recopilar retroalimentaci√≥n:
o	Encuestas breves dentro del sistema o por correo.
o	Formularios de sugerencias o chats integrados.
o	Soporte v√≠a WhatsApp, Telegram, etc.
‚Ä¢	Analizar resultados:
o	Identificar puntos de fricci√≥n.
o	Clasificar sugerencias en usabilidad, nuevas funciones y errores.
Tarea 5.3: Planeaci√≥n de Mejoras y Escalabilidad
‚Ä¢	Pr√≥ximas funcionalidades:
o	WebSockets: Implementar Django Channels + Redis para tiempo real.
o	Versi√≥n de Escritorio: Usar Electron si se necesita una app instalable.
o	Infraestructura Escalable: Migrar gradualmente a AWS (EC2, RDS, S3).
‚Ä¢	Mantenimiento continuo:
o	Planificar sprints de desarrollo iterativo.
o	Establecer ciclos de releases semanales o quincenales.
Tarea 5.4: Backups y Seguridad
‚Ä¢	Copias de seguridad:
o	Asegurar que la PaaS (Heroku, Railway, Render) tenga backups autom√°ticos activados.
o	Exportaciones peri√≥dicas manuales si es necesario.
‚Ä¢	Auditor√≠as b√°sicas de seguridad:
o	Revisar acceso a variables sensibles y tokens.
o	Rotar claves peri√≥dicamente si hay sospechas.
o	Validar que no haya archivos .env o secretos en los repositorios p√∫blicos.
Tarea 5.5: Pruebas T√©cnicas Avanzadas
‚Ä¢	Pruebas End-to-End (E2E):
o	Usar herramientas como Cypress o Playwright para validar flujos clave.
‚Ä¢	Pruebas de rendimiento y estr√©s:
o	Usar Apache Bench, k6, o herramientas similares para anticipar cuellos de botella.
‚Ä¢	Pruebas de seguridad:
o	Analizar posibles vulnerabilidades con herramientas como OWASP ZAP o snyk.

